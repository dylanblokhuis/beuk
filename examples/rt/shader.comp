#version 460
#extension GL_EXT_ray_query : enable
#extension GL_EXT_debug_printf : enable

layout(set = 0, binding = 0, rgba8) uniform image2D outputImage;
layout(set = 0, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 2) uniform Camera {
    mat4 view_proj;
    mat4 inverse_view_proj;
    mat4 view;
    mat4 inverse_view;
    mat4 proj;
    mat4 inverse_proj;
    vec3 world_position;
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(gid) / vec2(imageSize(outputImage));

    vec3 ray_origin = world_position;

    // Convert the 2D UV coordinates to 3D homogeneous coordinates.
    vec4 screenPos = vec4(uv * 2.0 - 1.0, -1.0, 1.0);  // The Z value (-1.0) assumes a right-handed coordinate system.

    // Un-project to view space.
    vec4 viewRayDir = inverse_proj * screenPos;
    // Convert it to a direction (we won't use the .w component after this).
    viewRayDir /= viewRayDir.w;


    // Convert to world space.
    vec4 worldRayDir = inverse_view * vec4(viewRayDir.xyz, 0.0);
    vec3 ray_dir = normalize(worldRayDir.xyz);

    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, ray_origin, 0.0, ray_dir, 1000.0);
    
    while (rayQueryProceedEXT(rayQuery)) {}

    // 4. Check intersection and set color
    if (rayQueryGetIntersectionTypeEXT(rayQuery, false) != gl_RayQueryCommittedIntersectionNoneEXT) {
        imageStore(outputImage, gid, vec4(0.0, 1.0, 0.0, 1.0));  // Green for intersection
    } else {
        imageStore(outputImage, gid, vec4(ray_dir, 1.0));  // Black for no intersection
    }
}
